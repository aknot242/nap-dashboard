input {
  syslog {
    port => 515
    codec => plain {
      charset => "ISO-8859-1"
    }
  }
}
filter {
  grok {
    match => {
      "message" => [
        ",attack_type=\"%{DATA:attack_type}\"",
        ",blocking_exception_reason=\"%{DATA:blocking_exception_reason}\"",
        ",bot_anomalies=\"%{DATA:bot_anomalies}\"",
        ",bot_category=\"%{DATA:bot_category}\"",
        ",bot_signature_name=\"%{DATA:bot_signature_name}\"",
        ",client_application=\"%{DATA:client_application}\"",
        ",client_application_version=\"%{DATA:client_application_version}\"",
        ",client_class=\"%{DATA:client_class}\"",
        ",date_time=\"%{DATA:date_time}\"",
        ",dest_port=\"%{DATA:dest_port}\"",
        ",enforced_bot_anomalies=\"%{DATA:enforced_bot_anomalies}\"",
        ",grpc_method=\"%{DATA:grpc_method}\"",
        ",grpc_service=\"%{DATA:grpc_service}\"",
        ",ip_client=\"%{DATA:ip_client}\"",
        ",is_truncated=\"%{DATA:is_truncated}\"",
        ",method=\"%{DATA:method}\"",
        ",outcome=\"%{DATA:outcome}\"",
        ",outcome_reason=\"%{DATA:outcome_reason}\"",
        ",policy_name=\"%{DATA:policy_name}\"",
        ",protocol=\"%{DATA:protocol}\"",
        ",request_status=\"%{DATA:request_status}\"",
        ",request=\"%{DATA:request}\"",
        ",request_body_base64=\"%{DATA:request_body_base64}\"",
        ",response_code=\"%{DATA:response_code}\"",
        ",severity=\"%{DATA:severity}\"",
        ",sig_cves=\"%{DATA:sig_cves}\"",
        ",sig_ids=\"%{DATA:sig_ids}\"",
        ",sig_names=\"%{DATA:sig_names}\"",
        ",sig_set_names=\"%{DATA:sig_set_names}\"",
        ",src_port=\"%{DATA:src_port}\"",
        ",staged_sig_cves=\"%{DATA:staged_sig_cves}\"",
        ",staged_sig_ids=\"%{DATA:staged_sig_ids}\"",
        ",staged_sig_names=\"%{DATA:staged_sig_names}\"",
        ",staged_threat_campaign_names=\"%{DATA:staged_threat_campaign_names}\"",
        ",sub_violations=\"%{DATA:sub_violations}\"",
        ",support_id=\"%{DATA:support_id}\"",
        ",threat_campaign_names=\"%{DATA:threat_campaign_names}\"",
        ",unit_hostname=\"%{DATA:unit_hostname}\"",
        ",uri=\"%{DATA:uri}\"",
        ",violations=\"%{DATA:violations}\"",
        ",violation_details=\"%{DATA:violation_details_xml}\"",
        ",violation_rating=\"%{DATA:violation_rating}\"",
        ",vs_name=\"%{DATA:vs_name}\"",
        ",x_forwarded_for_header_value=\"%{DATA:x_forwarded_for_header_value}\""
      ]
    }
    break_on_match => false
  }
  if [violation_details_xml] != "N/A" {
    xml {
      source => "violation_details_xml"
      target => "violation_details"
      remove_namespaces => true
			force_array => false
    }
  }
  mutate {
    split => { "attack_type" => "," }
    split => { "sig_cves" => "," }
    split => { "sig_ids" => "," }
    split => { "sig_names" => "," }
    split => { "sig_set_names" => "," }
    split => { "staged_sig_cves" => "," }
    split => { "staged_sig_ids" => "," }
    split => { "staged_sig_names" => "," }
    split => { "staged_threat_campaign_names" => "," }
    split => { "sub_violations" => "," }
    split => { "threat_campaign_names" => "," }
    split => { "violations" => "," }
    remove_field => [
      "[violation_details][violation_masks]",
      "violation_details_xml",
      "message", "priority","facility","facility_label"
    ]
    add_field => { "count" => 1 }
  }
  if [x_forwarded_for_header_value] != "N/A" {
    mutate { add_field => { "source_host" => "%{x_forwarded_for_header_value}"}}
  } 
  else {
    mutate { add_field => { "source_host" => "%{ip_client}"}}
  }
  geoip {
    source => "source_host"
  }

  if [violation_details] {
    clone {  
      clones => ["decoded"]
    }
  }

  if [type] == "decoded" {
    ruby {
    
      code => "
              require 'base64';
              temp = event.get('[violation_details][request-violations]');
              violation_array = []
              h = Hash.new
              if temp['violation'].is_a?(Array);
                x=0 
                while x < temp['violation'].length
                  case temp['violation'][x]['viol_name']
                    
                  when 'VIOL_ATTACK_SIGNATURE'
                    h.clear()

                    if temp['violation'][x]['context']=='parameter'
                        temp['violation'][x]['parameter_data']['value']=URI::encode(Base64.decode64(temp['violation'][x]['parameter_data']['value']))
                        temp['violation'][x]['parameter_data']['name']=URI::encode(Base64.decode64(temp['violation'][x]['parameter_data']['name']))
                    end

                    if temp['violation'][x]['context']=='header'
                        temp['violation'][x]['header']['header_value']=URI::encode(Base64.decode64(temp['violation'][x]['header']['header_value']))
                        temp['violation'][x]['header']['header_name']=URI::encode(Base64.decode64(temp['violation'][x]['header']['header_name']))
                    end
                    
                    if temp['violation'][x]['context']=='cookie'
                        temp['violation'][x]['cookie']['cookie_value']=URI::encode(Base64.decode64(temp['violation'][x]['cookie']['cookie_value']))
                        temp['violation'][x]['cookie']['cookie_name']=URI::encode(Base64.decode64(temp['violation'][x]['cookie']['cookie_name']))
                    end

                    if temp['violation'][x]['sig_data'].is_a?(Array);
                      y=0
                      while y < temp['violation'][x]['sig_data'].length
                        ####### Loop through all the keys and store them on a new hash.
                        temp['violation'][x].each do |pair|
                          if pair[0] == 'sig_data'
                            ### Sometimes the kw_data is an array. Therefore we need to determine if it is an array and it is run a while loop to decode all of the values
                            if temp['violation'][x]['sig_data'][y]['kw_data'].is_a?(Hash);
                              temp['violation'][x]['sig_data'][y]['kw_data']['buffer_decoded']=URI::encode(Base64.decode64(temp['violation'][x]['sig_data'][y]['kw_data']['buffer']))
                            else
                              z = 0
                              while z < temp['violation'][x]['sig_data'][y]['kw_data'].length
                                temp['violation'][x]['sig_data'][y]['kw_data'][z]['buffer_decoded']=URI::encode(Base64.decode64(temp['violation'][x]['sig_data'][y]['kw_data'][z]['buffer']))
                                z = z +1
                              end
                            end              
                            h.store(pair[0], pair[1][y])
                          else
                            h.store(pair[0], pair[1])
                          end
                        end
                        data = Marshal.dump(h)
                        violation_array.push(Marshal.restore(data))
                        y = y +1
                      end
                    end
                    if temp['violation'][x]['sig_data'].is_a?(Hash);
                      ### Sometimes the kw_data is an array of fields. Therefore we need to determine if it is an array and it is run a while loop to decode all of the values
                      if temp['violation'][x]['sig_data']['kw_data'].is_a?(Hash);
                        temp['violation'][x]['sig_data']['kw_data']['buffer_decoded']=URI::encode(Base64.decode64(temp['violation'][x]['sig_data']['kw_data']['buffer']))
                      else
                        z = 0
                        while z < temp['violation'][x]['sig_data']['kw_data'].length
                          temp['violation'][x]['sig_data']['kw_data'][z]['buffer_decoded']=URI::encode(Base64.decode64(temp['violation'][x]['sig_data']['kw_data'][z]['buffer']))
                          z = z +1
                        end
                      end

                      temp['violation'][x].each do |pair|
                        h.store(pair[0], pair[1])
                      end
                      data = Marshal.dump(h)
                      violation_array.push(Marshal.restore(data))
                    end


                  when 'VIOL_HTTP_PROTOCOL'
                    h.clear()
                    if temp['violation'][x].has_key?('http_sub_violation')
                      temp['violation'][x]['http_sub_violation']=URI::encode(Base64.decode64(temp['violation'][x]['http_sub_violation']))
                    end
                    temp['violation'][x].each do |pair|
                      h.store(pair[0], pair[1])
                    end
                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                    
                  end
                  x = x + 1
                end

              else
                case temp['violation']['viol_name']
                  
                when 'VIOL_ATTACK_SIGNATURE'
                  h.clear()

                  if temp['violation']['context']=='parameter'
                      temp['violation']['parameter_data']['value']=URI::encode(Base64.decode64(temp['violation']['parameter_data']['value']))
                      temp['violation']['parameter_data']['name']=URI::encode(Base64.decode64(temp['violation']['parameter_data']['name']))
                  end

                  if temp['violation']['context']=='header'
                      temp['violation']['header']['header_value']=URI::encode(Base64.decode64(temp['violation']['header']['header_value']))
                      temp['violation']['header']['header_name']=URI::encode(Base64.decode64(temp['violation']['header']['header_name']))
                  end
                  
                  if temp['violation']['context']=='cookie'
                      temp['violation']['cookie']['cookie_value']=URI::encode(Base64.decode64(temp['violation']['cookie']['cookie_value']))
                      temp['violation']['cookie']['cookie_name']=URI::encode(Base64.decode64(temp['violation']['cookie']['cookie_name']))
                  end

                  if temp['violation']['sig_data'].is_a?(Array);
                    y=0
                    while y < temp['violation']['sig_data'].length
                      temp['violation'].each do |pair|
                        if pair[0] == 'sig_data'
                            ### Sometimes the kw_data is an array. Therefore we need to determine if it is an array and it is run a while loop to decode all of the values
                            if temp['violation']['sig_data'][y]['kw_data'].is_a?(Hash);
                            temp['violation']['sig_data'][y]['kw_data']['buffer_decoded']=URI::encode(Base64.decode64(temp['violation']['sig_data'][y]['kw_data']['buffer']))
                          else
                            z = 0
                            while z < temp['violation']['sig_data'][y]['kw_data'].length
                              temp['violation']['sig_data'][y]['kw_data'][z]['buffer_decoded']=URI::encode(Base64.decode64(temp['violation']['sig_data'][y]['kw_data'][z]['buffer']))
                              z = z +1
                            end
                          end              
                          h.store(pair[0], pair[1][y])

                          temp['violation']['sig_data'][y]['kw_data']['buffer']=URI::encode(Base64.decode64(temp['violation']['sig_data'][y]['kw_data']['buffer']))
                          h.store(pair[0], pair[1][y])
                        else
                          h.store(pair[0], pair[1])
                        end
                      end
                      data = Marshal.dump(h)
                      violation_array.push(Marshal.restore(data))
                      y = y +1
                    end
                  end

                  if temp['violation']['sig_data'].is_a?(Hash);
                    temp['violation']['sig_data']['kw_data']['buffer']=URI::encode(Base64.decode64(temp['violation']['sig_data']['kw_data']['buffer']))
                    temp['violation'].each do |pair|
                      h.store(pair[0], pair[1])
                    end
                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))
                  end


                when 'VIOL_HTTP_PROTOCOL'
                  h.clear()
                  if temp['violation'].has_key?('http_sub_violation')
                    temp['violation']['http_sub_violation']=URI::encode(Base64.decode64(temp['violation']['http_sub_violation']))
                  end
                  temp['violation'].each do |pair|
                    h.store(pair[0], pair[1])
                  end
                  data = Marshal.dump(h)
                  violation_array.push(Marshal.restore(data))

                end
              end
              event.set('details', violation_array);
      "
    }
  }

  if [type] == "decoded" {
    if [details][0] { 
      # == "yes" {
      split {
        field => ["[details]"]
      }
    }
    mutate {
      copy => { "[details][sig_data][sig_id]" => "[sig_id]" }
      remove_field => [
        "violation_details", "bot_anomalies","enforced_bot_anomalies", "client_application","bot_category",
        "sig_set_names","sig_names","client_application_version","sig_ids", "violations","request","geoip"
      ]
    }
  }

}
output {
  if [type] == "decoded" { 
    if [sig_id] {
      #if sig_id exists then it will use the pipeline to ingest the data.
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "waf-decoded-logs-%{+YYY.MM.dd}"
        pipeline => "sig_lookup"
      }
    }
    if [details][viol_name] {
      #if sig_id DOESNt exists but there is a details.viol_name then it will send the decoded data to.

      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "waf-decoded-logs-%{+YYY.MM.dd}"
        
      }
    }
  }
  else{
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "waf-logs-%{+YYY.MM.dd}"
    }
  }
}
